JasonTable = function(config) {
	this.COMM_TABLE_URL_ACTION = config.COMM_TABLE_URL_ACTION || 'commController.action';
	this.COMM_TABLE_URL = config.COMM_TABLE_URL || 'commController/comm.action';
	this.PACKAGE_NAME = config.PACKAGE_NAME || 'com.business.entity.';
	this.XMLName = config.XMLName || '';
	this.XMLType = config.XMLType || 'findPageList';
	this.tableType = config.tableType || [ 'findPageList' ];
	this.renderId = config.renderId;
	this.toolBar = config.toolBar || true;
	this.groupDivStyle = config.groupDivStyle || 'span4';
	this.columnInputStyel = config.columnInputStyel || '';
	this.setMethod = config.setMethod;
	// 初始化
	(function(config) {
		if (config.renderId) {// 根据给定id生成内容通用内容
			var gId = config.GID();
			$('#' + config.renderId).append(
					'<div class="accordion" id="'+gId+'accordion" style="display: none;">'
					+	'<div id="'+gId+'accordion-group" class="accordion-group">'
					+		'<div id="'+gId+'accordion-heading" class="accordion-heading">'
					+			'<button id="'+gId+'toolBarAdd" class="btn btn-info" style="display: none;">添加</button>'
					+			'<button id="'+gId+'toolBarDel" class="btn btn-danger" data-toggle="collapse" data-parent="#accordion" data-target="#collapseOne" style="display: none;">删除</button>'
					+			'<button id="'+gId+'toolBarModifile" class="btn btn-danger" data-toggle="collapse" data-parent="#accordion" data-target="#collapseOne" style="display: none;">修改</button>'
					+			'<button id="'+gId+'toolBarQuery" class="btn btn-info" data-toggle="collapse" data-parent="#accordion" style="display: none;">查询选项</button>'
					+		'</div>'
					+		'<div id="'+gId+'collapseOne" class="accordion-body collapse">'
					+			'<div class="accordion-inner"></div>'
					+		'</div>'
					+'	</div>'
					+'</div>'
					);
			$('#' + config.renderId).append(
					'<table id="'+gId+'commTablePageList"></table>' 
					+ '<div id="'+gId+'comm"></div>' 
					+ '<div id="'+gId+'commAdd"></div>' 
					+ '<div id="'+gId+'findById"></div>'
					//model
					+ '<div id="'+gId+'commModel" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">' + '<div class="modal-header">'
					+ '<button type="button" class="close" data-dismiss="modal" aria-hidden="true" onclick="removecommModel();">×</button>' 
					+ '<h3 id="'+gId+'myModalLabel"></h3>' + '</div>'
					+ '<div id="'+gId+'modal-body" class="modal-body"></div>' 
					+ '<div class="modal-footer">'
					+ '<button class="btn" data-dismiss="modal" aria-hidden="true" onclick="removecommModel(\''+gId+'commModel\');">关闭</button>'
					+ '<button id="'+gId+'btn-primary-save" class="btn btn-primary" onclick="setInputValue();">保存</button>' + '</div>' + '</div>');
			

					$('#' + config.renderId).append('<div id="' + gId + 'commTablebable" class="tabbable" style="display:none;">' + '<ul id="' + gId + 'commNav-tabs" class="nav nav-tabs"></ul>' + '<div id="' + gId
							+ 'commTab-content" class="tab-content"  style=""></div>' + '<hr></div>');
			
			
		}else{
			alert('请选择渲染ID');
		}
		
		var types = config.XMLType.toString();
		if(config.toolBar)
			config.showToolBar();
		$.getJSON(config.COMM_TABLE_URL + '?xml=' + config.XMLName + '&type=' + config.XMLType + '&r=' + Math.random(), function(r) {
			if(r.findPageList)
				config.addPageList(r.findPageList);
			if(r.fuzzy)
			config.addFuzzy(r.fuzzy);
			if(r.add)
				config.addAdd(r.add);
			if(r.updata)
				config.addModify(r.updata);
		});
	})(this);
};
JasonTable.prototype = {
		GID : function() {//生成全局的ID
			
			return this.XMLName.split('.')[0] + '_';
		},
		createID : function(id){//根据表名生成各种id
			var tableName = this.getSimpleId(id);
			//0为comm
			return {
				TID : tableName//tableID
			};
		},
		addPageList : function(f){
			var xmlType = '&xml=' + this.XMLName + '&modelType=' + f.modelType;
			var objectType = '&objectType=' + f.id;
			this.commTableHead(objectType, xmlType, function(r, t) {//获得通用列表
				t.commTablePageList(objectType, xmlType, t.convertTableListHead(r), t.GID() + 'commTablePageList');
			});
		},
		addFuzzy : function(fz){
			var gid = this.GID();
			var XMLType = '&xml=' + this.XMLName + '&modelType=' + fz.modelType;
			var tableID = gid +  this.createID(fz.id).TID + '_fz';
			var objectType = '&objectType=' + fz.id;
			var toolBarID = gid + 'toolBarQuery';
			var accordID = tableID + '_ac';
			var accordInnerID = tableID + '_in';
			$('#'+toolBarID).show();
			
			this.addToolBarAccordionMethod(toolBarID, accordID);
			
			this.commTableHead(objectType, XMLType, function(r, t) {
				t.addAccordionContent(r, tableID, accordID, accordInnerID);
				t.addFuzzyToolBar(accordInnerID, tableID, gid + 'commTablePageList');
			});
			
			
		},
		addAdd : function(f){
			var gid = this.GID();
			var XMLType = '&xml=' + this.XMLName + '&modelType=' + f.modelType;
			var tableID = gid + this.getSimpleId(f.id) + '_ad';
			var addObjectType = '&objectType=' + f.id;
			var addObjectID = tableID + '_id';
			var addObjectTitle = f.name;
			var addTypeModel = f.typeModel;
			var addGroupStyle = f.groupStyle;
			var toolBarID = gid + 'toolBarAdd';
			var flag =window.flag;
			var setMethod = null;
			if(this.setMethod){
				var set = [];
				for(var key in this.setMethod){
					if(this.setMethod[key])
						set.push(key + ':' + this.setMethod[key]);
				}
				setMethod = set.toString();
			}
			
			
			
			if (flag == gid + '_flag') {
				this.commTableHead(addObjectType, XMLType, function(r, t) {
					t.commTable(r, tableID, gid + 'commAdd', addGroupStyle, window.setColumn);
					t.addSaveAndCloseButton(tableID, addObjectType, addObjectID);
				});
			} else {
				$('#' + toolBarID).show();
				//var openTypeStr = 'openNewWindow';
				this.openType(addTypeModel, addObjectType, XMLType, tableID, addObjectID, addObjectTitle, addGroupStyle, setMethod);
			}
		},
		addDel : function(){},
		addModify:function(){
			
		},
		commTable : function(table, tableId, renderId, groupStyle, setColumn) {// 增加通用单数据表

			$('#' + renderId).append('<form id="' + tableId + '" class="form-horizontal well"></table>');
			$('#' + tableId).append('<div id="' + tableId + 'commrow"  class="row"></div');
			for(var v in table){
				this.addTable(tableId, table[v], groupStyle);
			}
			
			
			if(setColumn){
				var columnJson = {};
				var setColumns = setColumn.split(",");
				for(var i=0; i< setColumns.length; i++){
					var setValue = setColumns[i].split(":");
					columnJson[setValue[0]] = setValue[1]; 
				}
				
				var columnInputId = this.getIdWipePoint(tableId + '_' + columnJson.selfColumn + 'id');
				
				$('#' + columnInputId).attr("value", columnJson.selfColumnValue);
			}
			
			
			
			/*$.each(table, function(i, v) {
				this.addTable(tableId, v, groupStyle);
			});*/

		},

		addValidator : function (XMLValidatorString, inputId) {
			var webRe = /^web*/i;
			var serverRe = /^server/i;
			var validatorStr = XMLValidatorString.split(";");
			jQuery.each(validatorStr, function(i, v) {
				if (webRe.exec(v)) {
					
					var webValidatorStr = v.substr(4).replace(/'/g, '"');
					jQuery.parseJSON(webValidatorStr);
					$('#' + inputId).attr(jQuery.parseJSON(webValidatorStr));
					if ($('#' + inputId).attr("require") == 'true') {
						var LabelItem = $('#' + inputId + 'Label');
						LabelItem.html("<span style='color:red'>*</span>" + LabelItem.text());
					};
				}
				if (serverRe.exec(v)) {
					// do SomeThing，后台验证。
				};
			});
		},

		addTable : function (tableId, v, groupStyle) {

			var divStyle = this.groupDivStyle;
			var innerInputId = this.getIdWipePoint(tableId + '_' + v.field);

			var divGroup = '<div class="' + divStyle + '"><div id="' + innerInputId + 'ControlGruop" class="control-group"><label id="' + innerInputId
					+ 'Label" style="width: 100px; margin: 2px 2px;" class="control-label" for="' + innerInputId + '">' + v.title + '</label></div>';
			if (v.type) {
				this.addTableType(tableId, v, divGroup);
			} else {
				var inputType = '<input id="' + innerInputId + '" class="" type="text" name="' + v.field + '" placeholder="' + v.title + '" />';
				$('#' + tableId + 'commrow').append(divGroup);
				$('#' + innerInputId + 'ControlGruop').append(inputType);

			}
			if (v.columnValidation) {
				this.addValidator(v.columnValidation, innerInputId);
			}
		},
		addTableType : function(tableId, v, divGroup) {
			var innerInputId = this.getIdWipePoint(tableId + '_' + v.field);
			switch (jQuery.trim(v.type).toLocaleLowerCase()) {

			case 'combox':
				
				var inputType = '<div class="input-append">' 
						+ '<input disabled="" class="" id="' + innerInputId + 'name" type="text" name="' + v.field + '" placeholder="'
						+ v.title + '"/>' + '<input  id="' + innerInputId + '" type="hidden" name="' + v.field + '"/>' 
						+ '<button class="btn" onclick="commTree(\'' + innerInputId + '\',\'' + v.url
						+ '\');" type="button">选框</button> </div>';

				$('#' + tableId + 'commrow').append(divGroup);
				$('#' + innerInputId + 'Label').attr('for', innerInputId+ 'name');
				$('#' + innerInputId + 'ControlGruop').append(inputType);
				break;
			case 'compare':
				var inputType = '<div class="inline">' + '<input id="' + innerInputId + 'Start" class="input-small uneditable-input"  type="text" name="' + v.field + '"/> - ' + '<input id="'
						+ innerInputId + 'End" class="input-small uneditable-input" type="text" name="' + v.field + '"/></div>';

				$('#' + tableId + 'commrow').append(divGroup);
				$('#' + innerInputId + 'ControlGruop').append(inputType);

				break;

			case 'set':
				$('#'+this.GID()+'commTablebable').show();
				var setFeildId = tableId + v.field;
				
				this.addSetNav(v, setFeildId, this.GID() + 'commNav-tabs');
				break;
			case 'hidden':
				var inputType = '<input id="' + innerInputId + '" class="this.columnInputStyel" type="hidden" name="' + v.field + '" placeholder="' + v.title + '" />';
				$('#' + tableId + 'commrow').append(inputType);
				break;

			case 'select':
				$('#' + tableId + 'commrow').append(divGroup);
				this.getSelectInputContent(innerInputId, v, v.attribute);

				break;

			case 'datatime':
				var inputType = '<input id="' + innerInputId + '" class="this.columnInputStyel" type="text" name="' + v.field + '" placeholder="' + v.title + '">' + '<img onclick="WdatePicker({el:' + innerInputId
						+ '})" src="js/my97DatePicker/skin/datePicker.gif" width="16" height="22" align="absmiddle">' + '</div>';
				$('#' + tableId + 'commrow').append(divGroup);
				$('#' + innerInputId + 'ControlGruop').append(inputType);
				break;

			case 'checkbox':
				$('#' + tableId + 'commrow').append(divGroup);
				this.getCheckBoxInputContent(innerInputId, v, v.attribute);

				break;
			case 'textarea':
				$('#' + tableId + 'commrow').append(divGroup);
				var inputType = '<textarea id="' + innerInputId + '" class="this.columnInputStyel" type="text" name="' + v.field + '" placeholder="' + v.title + '" />';
				$('#' + innerInputId + 'ControlGruop').append(inputType);
				
				break;

			default:
				$('#' + tableId + 'commrow').append(divGroup);

				var inputType = '<input id="' + innerInputId + '" class="this.columnInputStyel" type="text" name="' + v.field + '" placeholder="' + v.title + '" />';
				$('#' + innerInputId + 'ControlGruop').append(inputType);
				break;
			}

		},

		resolvParameterString : function(parameter) {
			var i = parameter.indexOf(":");
			return [ parameter.substr(0, i), parameter.substr(i + 1) ];
		},

		getCheckBoxInputContent : function(innerInputId, v, selectType) {
			var typeObject = this.resolvParameterString(selectType);
			switch (typeObject[0].toString().toLowerCase()) {
			case 'objectdata':
				var objectValue = typeObject[1].replace(/\[|\]|'/g, "").split(",");
				var selectValue = "";
				$('#' + innerInputId + 'ControlGruop').append('<div id=' + innerInputId + 'CheckBoxCtr class="controls">');
				jQuery.each(objectValue, function(i, s) {
					selectValue = '<label class="checkbox"  style="display: inline-block;"><input id=' + innerInputId + ' type="checkbox" class="this.columnInputStyel"  name="' + v.field + '" value=' + s + '>'
							+ s + '</label>' + selectValue;
				});
				$('#' + innerInputId + 'CheckBoxCtr').append(selectValue);
				break;

			case 'jsdata':
				var callFunction = typeObject[1].replace(/\[|\]/g, "").split(",").toString();
				var returnValue = eval(callFunction);
				('#' + innerInputId + 'ControlGruop').append(returnValue);
				break;
				
			case 'dictdata':
				var dictPid = typeObject[1];

				this.getDictData(dictPid, function(r) {
					var selectValue = "";
					jQuery.each(r, function(i, s) {
						selectValue = '<input id=' + innerInputId + ' type="checkbox" class="this.columnInputStyel"  name="' + v.field + '" value="' + s.id + '">' + s.name + '</input>' + selectValue;
					});

					$('#' + innerInputId + 'ControlGruop').append(selectValue);
				});
				break;
			default:
				break;
			};
		},

		getSelectInputContent : function(innerInputId, v, selectType) {
			var typeObject = this.resolvParameterString(selectType);
			switch (typeObject[0].toString().toLowerCase()) {
			case 'objectdata':
				var objectValue = typeObject[1].replace(/\[|\]|'/g, "").split(",");
				var selectValue = '<select id=' + innerInputId + ' class="this.columnInputStyel"  name="' + v.field + '">';

				jQuery.each(objectValue, function(i, v) {
					selectValue = selectValue + '<option value="' + v + '">' + v + '</option>';
				});
				selectValue = selectValue + '</select>';
				$('#' + innerInputId + 'ControlGruop').append(selectValue);
				break;

			case 'jsdata':
				var callFunction = typeObject[1].replace(/\[|\]/g, "").split(",").toString();
				var returnValue = eval(callFunction);
				$('#' + innerInputId + 'ControlGruop').append(returnValue);
			case 'dictdata':
				var dictPid = typeObject[1];

				this.getDictData(dictPid, function(r) {
					var selectValue = ['<select id=' + innerInputId + ' class="this.columnInputStyel"  name="' + v.field + '">'];
					jQuery.each(r, function(i, s) {
						selectValue.push('<option value="' + s.id + '">' + s.name + '</option>');
					});

					selectValue.push('</select>');

					$('#' + innerInputId + 'ControlGruop').append(selectValue.join(''));
				});

				break;
			default:
				break;
			};
		},

		getDictData : function(columnValue, callback) {
			$.getJSON(this.COMM_TABLE_URL_ACTION + '?findDictValue&columnValue=' + columnValue, function(r) {
				callback(r);
			});
		},

		/**
		 * 去除id中的点
		 * 
		 * @param idStr
		 * @returns
		 */
		getIdWipePoint : function(idStr) {
			return jQuery.trim(idStr.replace(/\./g, ''));
		},

		/**
		 * @param type
		 * @param xmlType
		 * @returns {String}
		 */
		openType : function(type, objectType, xmlType, tableId, objectId, objectTitle, groupStyle, setMethod) {
			switch (type) {
			case 'openNewWindow':
				this.addOpenNewWindow(xmlType, setMethod);
				break;
			case 'accordion':
				this.addOpenAccordion(objectType, objectId, xmlType, tableId, groupStyle, setMethod);
				break;
			case 'model':
				this.addOpenModel(objectType, objectId, xmlType, tableId, objectTitle, setMethod);
				break;
			default:
				this.addOpenAccordion(xmlType);
			}
		},
		addOpenModel : function(objectType, objectId, xmlType, tableId, objectTitle) {
			this.addToolBarClickAction(this.GID() + 'toolBarAdd', 'openModelAdd(\'' + objectType + '\', \'' + objectId + '\',\'' + xmlType + '\',\'' + tableId + '\',\'' + objectTitle + '\')');
		},

		
		addOpenNewWindow : function(xmlType, setMethod) {
			this.addToolBarClickAction(this.GID() + 'toolBarAdd', 'openWindowAdd(\'' + xmlType + '\', \''+this.GID() + '_flag\', \''  +setMethod+'\')');
		},

		addOpenAccordion : function(objectType, objectId, xmlType, tableId, groupStyle) {
			var accordId = tableId + '_ac';
			var accordInnerId = accordId + '_in';

			addToolBarAccordionMethod('toolBarAdd', accordId);

			commTableHead(objectType, xmlType, function(r) {// 获得通用列表
				addAccordionContent(r, tableId, accordId, accordInnerId, groupStyle);
			});
		},

		/**
		 * 删除渲染的表格
		 * 
		 * @param render
		 *            渲染地址
		 */
		removeCommTable : function(render) {
			$('#' + render).empty();
		},

		/**
		 * @字段类型为tree，添加tree，默认添加隐藏字段treeId,默认添加显示名称treeName treeId 为需要注入值的id treeUrl 为得到tree的Url
		 */
		commTree : function(treeId, treeUrl) {
			$.getJSON(dataUrl + '?findclassname', function(r) {
				$('#myModalLabel').html(r.className);
			});

			$('#modal-body').append('<div id="commTree"></div>');
			$(function() {
				$('#commTree').tree({
					url : treeUrl,
					lines : true,
					onBeforeLoad : function(p) {
						if (p) {
							// $('#housetree').tree('options').url = p.attributes.url;
							// console.info("varlues = " + varlues.url );
						}
					},
					onClick : function(v) {
						treeInputId = treeId;
						treeReturnName = v.text;
						treeReturnId = v.id;
					}
				});
			});
			//
			// 弹框显示
			$('#commModel').modal({
				backdrop : true,
				keyboard : true,
				show : true
			});
		},

		// 弹框内容选择
		setInputValue : function() {
			// 类名
			if (treeInputId && treeReturnId) {
				$('#' + treeInputId).attr('value', treeReturnId);
				$('#' + treeInputId + 'name').attr('value', treeReturnName);
				$('#commModel').modal('hide');
				treeReturnName = null;
				treeReturnId = null;
				removecommModel();
			} else {
				alert("请选择内容");
			};
		},
		// 删除弹框内容
		removecommModel : function(id) {
			$('#' + id).empty();
		},

		// 清除表单内容
		

		/**
		 * 获取表头
		 * 
		 * @param dataUrl
		 *            表头地址
		 * @param callback
		 *            获取完成回调函数
		 */
		commTableHead : function(objectType, xmlType,callback) {
			var t = this;
			$.getJSON(this.COMM_TABLE_URL_ACTION + '?findFields' + objectType + xmlType, function(r) {
				callback(r,t);
			});
		},

		/**
		 * 查询数据
		 * 
		 * @param dataUrl
		 * @param xmlType
		 * @param callback
		 */
		commTableValue : function(objectType, id, callback) {
			$.getJSON(this.COMM_TABLE_URL_ACTION + '?findById' + objectType + '&id=' + id, function(r) {
				callback(r);
			});
		},

		/**
		 * 给表单添加数据
		 * 
		 * @param r
		 * @param renderId
		 */
		addValues : function(r, renderId) {
			var input = $('#' + renderId + ' input[name]');
			$.each(input, function(i, v) {
				$('#' + v.id).val(r.obj[v.name]);
			});
		},

		/**
		 * 添加通用列表
		 * 
		 * @param url
		 * @param xmlType
		 * @param columns
		 */
		commTablePageList : function(objectType, xmlType, columns, renderId) {
			var url = this.COMM_TABLE_URL_ACTION + '?findFuzzy' + objectType + xmlType;
			if(this.setMethod){
				console.info(this.setMethod);
				url = this.COMM_TABLE_URL_ACTION + '?findByColumn' + objectType + '&columnName=' + this.setMethod.selfColumn + '&columnValue=' + this.setMethod.selfColumnValue;
			}
			$('#' + renderId).datagrid({
				url : url,
				iconCls : 'icon-edit',
				pagination : true,
				rownumbers : true,
				singleSelect : true,
				idField : 'itemid',
				striped : 'true',
				border : false,
				columns : columns,

				onBeforeLoad : function() {
					$(this).datagrid('rejectChanges');
				},
				onClickRow : function(rowIndex, rowData) {
					console.info(rowIndex);
					console.info(rowData);

					// renderId + TABLElIST_RETURN_ID = rowIndex;
					/*
					 * if (lastIndex != rowIndex) { areainfoTable('endEdit', lastIndex); areainfoTable('beginEdit',
					 * rowIndex); } lastIndex = rowIndex;
					 */
				}
			});
		},

		/**
		 * 将通用表头数据转换成列表表头数据
		 * 
		 * @param r
		 * @returns
		 */
		convertTableListHead : function(r) {
			jQuery.each(r, function(i, v) {
				if (v.type == 'hidden') {
					r[i].hidden = true;
				}
			});
			return [r];
		},

		/**
		 * 获取后台输入的类型数据，用于获得基本的实体信息
		 * 
		 * @param commData
		 * @param type
		 * @returns {GetCommDataByType}
		 */
		GetCommDataByType : function(commData, type) {
			return  {
				tableId : commData[type].id,
				tableName : commData[type].name,
				modelType : commData[type].modelType,
				dataUrl : commData[type].dataUrl,
				typeModel : commData[type].typeModel,
				groupStyle : commData[type].groupStyle
			};
		},
		getSimpleId : function(id) {
			var strs = id.split(".");
			return strs[strs.length - 1];
		},

		/**
		 * 给模糊查询添加确定和清除按钮
		 * 
		 * @param renderId
		 *            渲染地址
		 * @param tableListRenderId
		 *            表单ID
		 */
		addFuzzyToolBar : function(renderId, tableRenderId, tableListRenderId) {

			$('#' + renderId).append(
					'<div style="text-align: right; margin: 0px 10px;">' + '<button id="clean-query"class="btn" style="margin: 0px 10px;" onclick="cleanQuery(\'' + tableRenderId + '\');">清空</button>'
							+ '<button id="submit-query" class="btn btn-primary" style="margin: 0px 10px;" onclick="submitQuery(\'' + tableRenderId + '\', \'' + tableListRenderId + '\');">查询</button>'
							+ '</div>');
		},

		popUpWindow : function(URLStr, width, height) {
			if (width == undefined && height == undefined) {
				event.srcElement.openwin = open(URLStr);
				event.srcElement.openwin.focus();
			} else {
				var left = (screen.width - width) / 2;
				var top = (screen.height - height) / 2;

				event.srcElement.openwin = open(URLStr, "", "width= " + width + ",height=" + height + ",left=" + left + ",top=" + top);
				event.srcElement.openwin.focus();
			}
		},

		

		/**
		 * 弹出窗口
		 * 
		 * @param url
		 * @param width
		 * @param height
		 */
		

		/**
		 * 添加功能按钮
		 * 
		 * @param renderId
		 * @param objectType
		 * @param objectId
		 */
		addSaveAndCloseButton : function(tableId, objectType, objectId) {
			$('#' + tableId).before(
					'<div class="btn-group">' + '<div style="text-align: right; margin: 0px 10px;">' 
					+ '<button id="' + tableId + 'SaveButton" class="btn" onclick="submitData(\'' + this.COMM_TABLE_URL_ACTION + '?saveOrUpdata' + objectType+'\', \'' + tableId + '\', \'' + objectId + ' \');">保存</button>' 
					+ '<button class="btn btn-primary" onclick="submitDataAndCloseWindow(\'' + this.COMM_TABLE_URL_ACTION + '?saveOrUpdata' + objectType+'\', \'' + tableId + '\',  \'' + objectId + ' \');">保存并关闭</button>' 
					+ '<button class="btn btn-primary" onclick="closeOpenWindow();">关闭</button>' + '</div></div>');

		},

		

	

		/**
		 * 添加有一对多的多
		 * 
		 * @param r
		 * @param renderId
		 * @param setId
		 */
		addSetNav : function(r, setFeildId, setId) {
			console.info(r);
			var idValue = '402881e43c1cfd99013c1d2ea2650001';
			xmlAndType = r.attribute;
			$('#'+this.GID()+'commTab-content').append('<div class="tab-pane" id="' + setFeildId + '"></div>');
			$('#' + setId).append('<li><a onclick="switchTable(\'' + setFeildId + '\', \''+ xmlAndType +'\', \''+ idValue +'\');" href="#' + setFeildId + '" data-toggle="tab">' + r.title + '</a></li>');
		},

	

		addSetHead : function() {},
		addSetValue : function() {

		},
		hiddenToolBar : function() {
			$("#accordion").hide();
		},

		addToolBarClickAction : function(renderId, clickFunction) {
			$('#' + renderId).attr("onclick", clickFunction);
		},

		showToolBar : function() {
			$('#' + this.GID() + 'accordion').show();
		},



		addToolBarAccordionMethod : function(toolBarId, renderId) {

			$('#' + toolBarId).attr({
				'data-toggle' : "collapse",
				'data-parent' : "#accordion",
				'data-target' : '#' + renderId
			});
		},

		addAccordionContent : function(r, tableId, accordId, accordInnerId, groupStyle) {
			$('#'+ this.GID() + 'accordion-group').append('<div id="' + accordId + '" class="accordion-body collapse"></div>');
			$('#' + accordId).append('<div id="' + accordInnerId + '" class="accordion-inner"></div>');
			this.commTable(r, tableId, accordInnerId, groupStyle);
		},
		
		

};
//config = {XMLName : Custom.xml, XMLType : findPageList, pageType : ['findPageList', 'add', 'findFuzzy', 'delete']};

cleanQuery = function(tableListRenderId) {
	$('#' + tableListRenderId).form('clear');
};
// 将表单内容作为条件查询
submitQuery = function(renderId, tableListRenderId) {
	var queryParams = $.serializeObject($('#' + renderId).form());
	$('#' + tableListRenderId).datagrid("load", queryParams);
};

openWindowAdd = function(xml, flag, setMethod) {
	var setMethod = '&setMethod=' + setMethod;
	var win = addWin('addTable.jsp?flag=' + flag + xml + setMethod);
};

addWin = function(url, width, height) {
	var win;
	console.info(url);
	if (width == undefined && height == undefined) {
		win = window.open(url, '添加' + Math.random(), 'width=' + screen.width + ',height=' + screen.height + ',top=0,left=0,toolbar=yes,menubar=yes,scrollbars=yes,resizable=yes,location=yes,status=yes');
	/*	var body = win.document.getElementsByName('body');
		var e = win.document.createElement(	'<script type="text/javascript">'
		+'jQuery(document).ready(function() {'
		+	'var tx = new JasonTable({'
		+		'XMLName : \'a.xml\','
		+		'XMLType : \'add\''
		+		'renderId : \'table\''
		+	'});' 
		+'});'
		+'</script>);');
        e.value = "这是测试加载的小例子";
        var object = body.appendChild(e);*/
	} else {
		var left = (screen.width - width) / 2;
		var top = (screen.height - height) / 2;
		win = window.open(URLStr, "添加", "width= " + width + ",height=" + height + ",left=" + left + ",top=" + top);
	}
	return win;
};





openModelAdd = function(objectType, objectId, xmlType, tableId, objectTitle) {
	
	var t1 = new JasonTable({
		XMLName : 'Customer.xml',
		XMLType : 'add',
		renderId : 'modal-body'
	}); 
/*	commTableHead(objectType, xmlType, function(r) {// 获得通用列表
		commTable(r, tableId, 'modal-body');
	});*/
	$('#myModalLabel').text(objectTitle);
	$('#commModel').modal({
		backdrop : false,
		keyboard : true,
		show : true
	});
};

function closeOpenWindow() {
	window.close();
};

function submitDataAndCloseWindow(url, renderId, objectId) {
	submitData(url, renderId, objectId);
	closeOpenWindow();
};

function submitData(url, renderId, objectId) {
	var fromValidator = Validator.Validate(document.getElementById(renderId), 3, false);
	// if(!fromValidator) return;

	// 执行添加的所有验证
	//var form = $('#' + renderId).form();
	//var queryParams = $.serializeObject($('#' + renderId).form());
	var queryParams = $('#' + renderId).tracywindySerializeFormToJsonObject();
	if (!jQuery.isEmptyObject(queryParams)) {
		var object = url.substr(/objectType/i, url.length).split('.').pop() + '=' + $.toJSON(queryParams);
		jQuery.post(url, object, function(data) {
			if (data.success == true && data.msg) {
				$('#' + objectId).val(data.msg);
				$('#' + renderId + 'SaveButton').removeAttr('disabled');
			}
		}, 'json');
	} else {
		alert('还未填入数据');
		$('#' + renderId + 'SaveButton').removeAttr('disabled');
		return;
	};
};


function switchTable(setFeildId, xmlAndType, idValue) {
	//$('#'+this.GID()+'commTablebable a[href="#' + setFeildId + '"]');
	var content = jQuery('#' + setFeildId + ' > div');
	console.info(content);
	if (!content[0])
		addSetContent(setFeildId, xmlAndType, idValue);
};

function addSetContent(setFeildId, xmlAndType, idValue) {
	var attr = xmlAndType.split(';');  
	var xml, type, relateColumn;
	for(var s in attr){
		var v = attr[s].split('=');
		switch (v[0]) {
		case 'xml':
			xml = v[1];
			break;
		case 'type':
			type = v[1];
			break;
		case 'relateColumn':
			relateColumn =  v[1];
			break;
		default:
			console.info("XML设置值错误");
		}
		
	}
	var t = new JasonTable({
		XMLName : xml,
		XMLType : type,
		renderId : setFeildId, 
		setMethod : {
			parentXML : '',
			parentType : '',
			parentColumn : '',
			parentColumnValue : '',
			selfColumn : relateColumn,
			selfColumnValue : idValue
		}
	}); 
	
	//var content = createFrame(url);
	
	$('#' + setFeildId).append(content);
};


tableGrid  =  function(conf){
	this.url = conf.url;
	this.pagination = conf.pagination || true;
	this.rownumbers =  conf.rownumbers || true;
	this.singleSelect = conf.singleSelect || true;
	this.idField = conf.idField || 'id';
	this.striped = conf.striped || true;
	this.border = conf.border || false;
	//this.columns = conf.columns;
	this.renderID = conf.renderID;
};

tableGrid.prototype =  {
	paseData : function(callback) {
		var t = this;
		$.getJSON(this.url, function(r){
			callback(r, t);
		});
	},
	getHead : function(){
		this.paseData(function(r, t){
			t.createHead(r);
			//t.createBody()
		});
		
	},
	
	createHead : function(r){
		var strBuffer = [];
		for(var v in r){
			strBuffer.push('<th>' + r[v].title + '</th>');
		}
		$('#' + this.renderID).append('<table id="tableID" class="table table-striped table-bordered table-condensed">');
		$('#tableID').append('<thead>');
		$('#tableID > thead').append('<tr>');
		$('#tableID > thead > tr').append(strBuffer.join(''));
	},
	createGrid : function(head, data){
		
		var strBuffer = [];
		for(var v in head){
			strBuffer.push('<th>' + head[v].title + '</th>');
		}
		$('#' + this.renderID).append('<table id="tableID" class="table table-striped table-bordered table-condensed">');
		$('#tableID').append('<thead>');
		$('#tableID > thead').append('<tr>');
		$('#tableID > thead > tr').append(strBuffer.join(''));
		
		var dataBuffer = [];
		for(var d in data){
			dataBuffer.push('th' + data[d]['name']);
		}
		$('#tableID').append('<tbody>');
		$('#tableID > tbody').append('<tr>');
		$('#tableID > thead > tr').append(dataBuffer.join(''));
	}
};